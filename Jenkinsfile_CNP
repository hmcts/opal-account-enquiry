#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.Kubectl

def type = "java"
def product = "opal"
def component = "fines-service"

withPipeline(type, product, component) {
  afterAlways('smokeTest:dev') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-test-report/**/*'
  }

  afterAlways('smokeTest:stg') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-test-report/**/*'
  }

  afterAlways('functionalTest:dev') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-test-report/**/*'
  }

  afterAlways('functionalTest:stg') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-test-report/**/*'
  }
  if("dev" == env.ENV){
    withAksClient('nonprod', product) {
      def subscription = env.SUBSCRIPTION_NAME
      def namespace = new TeamConfig(this).getNameSpace(product)
      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()
      String postgresInstanceName = "opal-fines-service-pr-${CHANGE_ID}-postgresql"
      env.DATA_STORE_DB_HOST = kubectl.getServiceLoadbalancerIP(postgresInstanceName)
    }
  }
}
